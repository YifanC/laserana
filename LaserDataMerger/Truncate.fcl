##
##  A "minimal" Reconstruction for uboone data
##
#include "services_microboone.fcl"
#include "reco_uboone_data_minimal.fcl"

process_name: LaserDataMerger

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  #Timing:                  {}
  #SimpleMemoryCheck:       { ignoreTotal: 1 } # default is one
  #RandomNumberGenerator:   {} #ART native random number generator
  #message:                 @local::microboone_message_services_prod_debug
  #FileCatalogMetadata:     @local::art_file_catalog_data
  @table::microboone_reco_minimal_services
}
services.DetectorClocksService.InheritClockConfig: false
services.DatabaseUtil.ShouldConnect: false
#services.DetPedestalService.DetPedestalRetrievalAlg.UseDB: true

#source is now a root file
source:
{
  module_type: RootInput
  #maxEvents:  1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 #filters:
 #{
 # @table::microboone_reco_minimal_filters
 #}

 producers:
  {
      Truncator: {
        module_type: "Trunc"
        DigitModuleLabel: "daq"
        RawDigitLabel: ""

        WindowSize: 1000
        NumTicksToDropFront: 600
      }
  }

 reco: [ LaserDataMerger ]

 stream1:  [ out1 ]

 trigger_paths: [reco]

}
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "Truncated-%r-%05s.root"
   # sam_ignore:  true
   dataTier:    "reconstructed-2d"
   compressionLevel: 1
 }
}


